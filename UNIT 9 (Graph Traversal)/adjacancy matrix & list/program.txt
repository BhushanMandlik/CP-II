//Adjacancy Matrix program

/*#include <bits/stdc++.h>
using namespace std;
int vertArr[20][20]; //the adjacency matrix initially 0
int count = 0;

void displayMatrix(int v) {
   int i, j;
   for(i = 0; i < v; i++) {
      for(j = 0; j < v; j++) {
         cout << vertArr[i][j] << " ";
      }
      cout << endl;
   }
}

void add_edge(int u, int v) {       //function to add edge into the matrix
   vertArr[u][v] = 1;
   vertArr[v][u] = 1;
}

int main(){
   int v = 5;    //there are 5 vertices in the graph
   add_edge(0, 1);
   add_edge(0, 4);
   add_edge(1, 2);
   add_edge(1, 3);
   add_edge(1, 4);
   add_edge(2, 3);
   add_edge(3, 4);
   displayMatrix(v);
}*/

//Adjacancy List program

/*#include<bits/stdc++.h>
using namespace std;

void addEdge(vector<int> adj[], int u, int v)
{
  adj[u].push_back(v);
  adj[v].push_back(u);
}

void printGraph(vector<int> adj[], int V)
{
  for (int v = 0; v < V; ++v)
  {
    cout << "\n Adjacency list of vertex " << v << "\n head ";
    for (auto x : adj[v])
    cout << "-> " << x;
    printf("\n");
  }
}

int main()
{
  int V = 5;
  vector<int> adj[V];
  addEdge(adj, 0, 1);
  addEdge(adj, 0, 4);
  addEdge(adj, 1, 2);
  addEdge(adj, 1, 3);
  addEdge(adj, 1, 4);
  addEdge(adj, 2, 3);
  addEdge(adj, 3, 4);
  printGraph(adj, V);
  return 0;
}*/